
#task 1

class KeyIndex:
    def __init__(self,a):
        self.allowedV=None
        self.store=None
        self.allowedV=a[0]
        high=a[0]

        for i in a:
            if i<self.allowedV:
                self.allowedV=i
            if i>high:
                high=i
        self.allowedV=self.allowedV*(-1)
        self.store=[0]*(self.allowedV+high+1)

        for i in a:
            j=i+self.allowedV
            self.store[j]+=1

    def search(self,v):
        value=v +self.allowedV
        if value < len(self.store):
            if self.store[value] > 0:
                return True
            else:
                return False
        else:
            return False

    def sort(self):
        new= []
        count=0
        for i in self.store:
            if i!=0:
                for j in range(i):
                    new+=[(count-self.allowedV)]
            count+=1
        return new

print(" Task1--Key Index")
a = [-4,7,-3,-5,1,5,6,4,2,1]

print("List Used for the example- [-4,7,-3,-5,1,5,6,4,2,1]\n")
b = KeyIndex(a)
print("***Searching***")
print("Search with valid value '6' - ",b.search(6))
print("Search with invalid value '8' - ",b.search(8))
print("\n***Sorting***")
print(b.sort())




#task2

class Hashtable:
    def __init__(self, a):
        self.new=a
        self.hashing=[0]*9

    def hashCalculator(self,n):
        vowel=["A","E","I","O","U"]
        number=["0","1","2","3","4","5","6","7","8","9"]
        consonant=0
        total=0
        for i in n:
            if i not in vowel and i not in number:
                consonant +=1
            elif i in number:
                total+=int(i)
        calculation=((consonant*24)+total)%9
        return calculation

    def linearProbing(self):
        for i in self.new:
            has=self.hashCalculator(i)
            if self.hashing[has]==0:
                self.hashing[has]=i
            else:
                start=has
                while self.hashing[start] != 0:
                    start = (start + 1) % 9
                self.hashing[start] = i



print("\nTask 2--Hashing\n")
print('List used for test- ["ST1E89B8A32","AB356478CDEFG12","1869BHAK2364BSH","FNJB1523DBK56","SB1E988AT32","125ANJHB15","56324BHAKAGDF","DCSJBF6546SCBH5","NCSDJD566451FJSBFV"]')
list1 = ["ST1E89B8A32","AB356478CDEFG12","1869BHAK2364BSH",'FNJB1523DBK56',"SB1E988AT32","125ANJHB15","56324BHAKAGDF",'DCSJBF6546SCBH5','NCSDJD566451FJSBFV']
a = Hashtable(list1)
a.linearProbing()
print("After Hashing, the list looks like- ")
print(a.hashing)
























